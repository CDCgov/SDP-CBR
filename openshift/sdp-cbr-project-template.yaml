apiVersion: v1
kind: Template
metadata:
  creationTimestamp: null
  name: cbr
  annotations:
    description: 'Template used to deploy SDP CBR'
    openshift.io/display-name: SDP-CBR (Content Based Routing)
    openshift.io/long-description: 'This template deploys Surveillance Data Platform Content Based Routing (SDP-CBR) into an existing OpenShift project.'
    openshift.io/documentation-url: https://github.com/CDCgov/SDP-CBR
    template.openshift.io/provider-display-name: SDP Team
    template.openshift.io/support-url: https://svcmgr.cdc.gov/
    tags: cdc, sdp, cbr, routing, foodnet, phinms
  message: 'Content Based Routing was deployed from the template. Database username and password values can be found in the "pgqueue" and "postgresql" secrets.'
labels:
  template: CBR-template
objects:
- apiVersion: v1
  kind: ImageStream
  metadata:
    annotations:
      openshift.io/generated-by: OpenShiftWebConsole
    creationTimestamp: null
    generation: 1
    labels:
      app: foodnet
      promotion-group: cbr
    name: foodnet
- apiVersion: v1
  kind: ImageStream
  metadata:
    annotations:
      openshift.io/generated-by: OpenShiftWebConsole
    creationTimestamp: null
    generation: 1
    labels:
      app: phinms
      promotion-group: cbr
    name: phinms
- apiVersion: v1
  kind: ImageStream
  metadata:
    annotations:
      openshift.io/generated-by: OpenShiftWebConsole
    creationTimestamp: null
    generation: 1
    labels:
      app: scality2
      dep_env: stg
      promotion-group: cbr
    name: scality2
- apiVersion: v1
  kind: BuildConfig
  metadata:
    annotations:
      openshift.io/generated-by: OpenShiftWebConsole
    creationTimestamp: null
    labels:
      app: foodnet
      dep_env: stg
      promotion-group: cbr
    name: foodnet
  spec:
    nodeSelector: null
    output:
      to:
        kind: ImageStreamTag
        name: foodnet:latest
    postCommit: {}
    resources:
      limits:
        memory: 2Gi
      requests:
        memory: 2Gi
    runPolicy: Serial
    source:
      git:
        ref: v${CBR_RELEASE}
        uri: https://github.com/CDCgov/SDP-CBR
      type: Git
    strategy:
      sourceStrategy:
        env:
        - name: ARTIFACT_DIR
          value: foodNet/target
        from:
          kind: ImageStreamTag
          name: redhat-openjdk18-openshift:1.0
          namespace: openshift
      type: Source
    triggers:
    - imageChange: {}
      type: ImageChange
    - type: ConfigChange
- apiVersion: v1
  kind: BuildConfig
  metadata:
    annotations:
      openshift.io/generated-by: OpenShiftWebConsole
    creationTimestamp: null
    labels:
      app: phinms
      dep_env: stg
      promotion-group: cbr
    name: phinms
  spec:
    nodeSelector: null
    output:
      to:
        kind: ImageStreamTag
        name: phinms:latest
    postCommit: {}
    resources:
      limits:
        memory: 1792Mi
      requests:
        memory: 1792Mi
    runPolicy: Serial
    source:
      git:
        ref: v${CBR_RELEASE}
        uri: https://github.com/CDCgov/SDP-CBR
      type: Git
    strategy:
      sourceStrategy:
        env:
        - name: ARTIFACT_DIR
          value: phinms/target
        from:
          kind: ImageStreamTag
          name: redhat-openjdk18-openshift:1.0
          namespace: openshift
      type: Source
    triggers:
    - imageChange: {}
      type: ImageChange
    - type: ConfigChange
  status:
    lastVersion: 0
- apiVersion: v1
  kind: BuildConfig
  metadata:
    annotations:
      openshift.io/generated-by: OpenShiftWebConsole
    creationTimestamp: null
    labels:
      app: scality2
      dep_env: stg
      promotion-group: cbr
    name: scality2
  spec:
    nodeSelector: null
    output:
      to:
        kind: ImageStreamTag
        name: scality2:latest
    postCommit: {}
    resources:
      limits:
        cpu: 300m
        memory: 768Mi
      requests:
        cpu: 300m
        memory: 640Mi
    runPolicy: Serial
    source:
      git:
        ref: master
        uri: https://github.com/scality/S3
      type: Git
    strategy:
      sourceStrategy:
        from:
          kind: ImageStreamTag
          name: nodejs:6
          namespace: openshift
      type: Source
    triggers:
    - imageChange: {}
      type: ImageChange
    - type: ConfigChange
  status:
    lastVersion: 0
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    annotations:
      openshift.io/generated-by: OpenShiftWebConsole
    creationTimestamp: null
    generation: 1
    labels:
      app: foodnet
      promotion-group: cbr
    name: foodnet
  spec:
    replicas: 1
    selector:
      deploymentconfig: foodnet
    strategy:
      activeDeadlineSeconds: 21600
      resources: {}
      rollingParams:
        intervalSeconds: 1
        maxSurge: 25%
        maxUnavailable: 25%
        timeoutSeconds: 600
        updatePeriodSeconds: 1
      type: Rolling
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: foodnet
          deploymentconfig: foodnet
      spec:
        containers:
        - env:
          - name: PGQUEUE_USER
            valueFrom:
              secretKeyRef:
                key: database-user
                name: pgqueue
          - name: PGQUEUE_PASSWORD
            valueFrom:
              secretKeyRef:
                key: database-password
                name: pgqueue
          - name: PGQUEUE_DATABASE
            value: ${PGQUEUE_DATABASE_NAME}
          - name: AIMS_ACCESS_KEY
            valueFrom:
              secretKeyRef:
                key: access-key
                name: aims
          - name: AIMS_SECRET_ACCESS_KEY
            valueFrom:
              secretKeyRef:
                key: secret-access-key
                name: aims
          - name: JAVA_APP_JAR
            value: sdp-cbr-foodnet-${CBR_RELEASE}.jar
          - name: HTTP_PROXY
          - name: HTTPS_PROXY
          - name: NO_PROXY
          - name: http_proxy
          - name: https_proxy
          - name: no_proxy
          image: ${DOCKER_REGISTRY_IP}:${DOCKER_REGISTRY_PORT}/${NAMESPACE}/foodnet
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 10
            initialDelaySeconds: 30
            periodSeconds: 60
            successThreshold: 1
            tcpSocket:
              port: 8080
            timeoutSeconds: 1
          name: foodnet
          ports:
          - containerPort: 8080
            protocol: TCP
          - containerPort: 8443
            protocol: TCP
          - containerPort: 8778
            name: jolokia
            protocol: TCP
          readinessProbe:
            failureThreshold: 10
            initialDelaySeconds: 5
            periodSeconds: 60
            successThreshold: 1
            tcpSocket:
              port: 8080
            timeoutSeconds: 1
          resources:
            limits:
              cpu: 200m
              memory: 256Mi
            requests:
              memory: 256Mi
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /deployments/config/
            name: foodnet-config-data
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
        volumes:
        - configMap:
            defaultMode: 420
            name: foodnet-config
          name: foodnet-config-data
    test: false
    triggers:
    - imageChangeParams:
        automatic: true
        containerNames:
        - foodnet
        from:
          kind: ImageStreamTag
          name: foodnet:latest
          namespace: ${NAMESPACE}
      type: ImageChange
    - type: ConfigChange
  status:
    availableReplicas: 0
    latestVersion: 0
    observedGeneration: 0
    replicas: 0
    unavailableReplicas: 0
    updatedReplicas: 0
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    creationTimestamp: null
    generation: 1
    labels:
      app: pgqueue
      promotion-group: cbr
      template: postgresql-persistent-template
    name: pgqueue
  spec:
    replicas: 1
    selector:
      name: pgqueue
    strategy:
      activeDeadlineSeconds: 21600
      recreateParams:
        timeoutSeconds: 600
      resources: {}
      type: Recreate
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: pgqueue
          name: pgqueue
      spec:
        containers:
        - env:
          - name: POSTGRESQL_USER
            valueFrom:
              secretKeyRef:
                key: database-user
                name: pgqueue
          - name: POSTGRESQL_PASSWORD
            valueFrom:
              secretKeyRef:
                key: database-password
                name: pgqueue
          - name: POSTGRESQL_DATABASE
            value: ${PGQUEUE_DATABASE_NAME}
          image: registry.access.redhat.com/rhscl/postgresql-95-rhel7
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            tcpSocket:
              port: 5432
            timeoutSeconds: 1
          name: postgresql
          ports:
          - containerPort: 5432
            protocol: TCP
          readinessProbe:
            exec:
              command:
              - /bin/sh
              - -i
              - -c
              - psql -h 127.0.0.1 -U $POSTGRESQL_USER -q -d $POSTGRESQL_DATABASE -c
                'SELECT 1'
            failureThreshold: 3
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources:
            limits:
              memory: ${PGQUEUE_MEMORY_LIMIT}
          securityContext:
            capabilities: {}
            privileged: false
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /var/lib/pgsql/data
            name: pgqueue-data
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
        volumes:
        - name: pgqueue-data
          persistentVolumeClaim:
            claimName: pgqueue
    test: false
    triggers:
    - imageChangeParams:
        automatic: true
        containerNames:
        - postgresql
        from:
          kind: ImageStreamTag
          name: postgresql:9.5
          namespace: openshift
      type: ImageChange
    - type: ConfigChange
  status:
    availableReplicas: 0
    latestVersion: 0
    observedGeneration: 0
    replicas: 0
    unavailableReplicas: 0
    updatedReplicas: 0
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    annotations:
      openshift.io/generated-by: OpenShiftWebConsole
    creationTimestamp: null
    generation: 1
    labels:
      app: phinms
      promotion-group: cbr
    name: phinms
  spec:
    replicas: 1
    selector:
      deploymentconfig: phinms
    strategy:
      activeDeadlineSeconds: 21600
      resources: {}
      rollingParams:
        intervalSeconds: 1
        maxSurge: 25%
        maxUnavailable: 25%
        timeoutSeconds: 600
        updatePeriodSeconds: 1
      type: Rolling
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: phinms
          deploymentconfig: phinms
      spec:
        containers:
        - env:
          - name: PGQUEUE_USER
            valueFrom:
              secretKeyRef:
                key: database-user
                name: pgqueue
          - name: PGQUEUE_PASSWORD
            valueFrom:
              secretKeyRef:
                key: database-password
                name: pgqueue
          - name: PGQUEUE_DATABASE
            value: ${PGQUEUE_DATABASE_NAME}
          - name: POSTGRESQL_USER
            valueFrom:
              secretKeyRef:
                key: database-user
                name: postgresql
          - name: POSTGRESQL_PASSWORD
            valueFrom:
              secretKeyRef:
                key: database-password
                name: postgresql
          - name: POSTGRESQL_DATABASE
            value: ${POSTGRESQL_DATABASE_NAME}
          - name: JAVA_APP_JAR
            value: sdp-cbr-phinms-${CBR_RELEASE}.jar
          - name: HTTP_PROXY
          - name: HTTPS_PROXY
          - name: NO_PROXY
          - name: http_proxy
          - name: https_proxy
          - name: no_proxy
          image: ${DOCKER_REGISTRY_IP}:${DOCKER_REGISTRY_PORT}/${NAMESPACE}/phinms
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 10
            initialDelaySeconds: 30
            periodSeconds: 60
            successThreshold: 1
            tcpSocket:
              port: 8080
            timeoutSeconds: 1
          name: phinms
          ports:
          - containerPort: 8080
            protocol: TCP
          - containerPort: 8443
            protocol: TCP
          - containerPort: 8778
            name: jolokia
            protocol: TCP
          readinessProbe:
            failureThreshold: 10
            initialDelaySeconds: 5
            periodSeconds: 60
            successThreshold: 1
            tcpSocket:
              port: 8080
            timeoutSeconds: 1
          resources:
            limits:
              cpu: 200m
              memory: 256Mi
            requests:
              memory: 256Mi
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /deployments/config/
            name: phinms-config-data
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
        volumes:
        - configMap:
            defaultMode: 420
            name: phinms-config
          name: phinms-config-data
    test: false
    triggers:
    - imageChangeParams:
        automatic: true
        containerNames:
        - phinms
        from:
          kind: ImageStreamTag
          name: phinms:latest
          namespace: ${NAMESPACE}
      type: ImageChange
    - type: ConfigChange
  status:
    availableReplicas: 0
    latestVersion: 0
    observedGeneration: 0
    replicas: 0
    unavailableReplicas: 0
    updatedReplicas: 0
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    creationTimestamp: null
    generation: 1
    labels:
      app: postgresql
      dep_env: stg
      promotion-group: cbr
      template: postgresql-ephemeral-template
    name: postgresql
  spec:
    replicas: 1
    selector:
      name: postgresql
    strategy:
      activeDeadlineSeconds: 21600
      recreateParams:
        post:
          execNewPod:
            command:
            - /bin/sh
            - -c
            - . /usr/share/container-scripts/postgresql/scl_enable; dc_name=`grep
              -Po '^openshift\.io\/deployment\.name="\K[^-\d*"]*' /var/lib/pgsql/podinfo/pod-annotations`;
              PGPASSWORD=$POSTGRESQL_PASSWORD psql -h "$dc_name" -U $POSTGRESQL_USER
              -q -d $POSTGRESQL_DATABASE -c 'DROP TABLE IF EXISTS message_inq;  CREATE
              TABLE message_inq ( recordId SERIAL, messageId varchar(255) default
              NULL, payloadName varchar(255) default NULL, payloadBinaryContent BYTEA
              default NULL, payloadTextContent text default NULL, localFileName varchar
              (255) NOT NULL, service varchar (255) NOT NULL, action varchar (255)
              NOT NULL, arguments varchar (255) default NULL, fromPartyId varchar
              (255) default NULL, messageRecipient varchar (255) default NULL, errorCode
              varchar (255) default NULL, errorMessage varchar (255) default NULL,
              processingStatus varchar (255) default NULL, applicationStatus varchar
              (255) default NULL, encryption varchar (10) NOT NULL, receivedTime varchar
              (255) default NULL, lastUpdateTime varchar (255) default NULL, processId
              varchar (255) default NULL,  PRIMARY KEY (recordId));'
            containerName: postgresql
            volumes:
            - podinfo
          failurePolicy: Abort
        timeoutSeconds: 600
      resources: {}
      type: Recreate
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: postgresql
          name: postgresql
      spec:
        containers:
        - env:
          - name: POSTGRESQL_USER
            valueFrom:
              secretKeyRef:
                key: database-user
                name: postgresql
          - name: POSTGRESQL_PASSWORD
            valueFrom:
              secretKeyRef:
                key: database-password
                name: postgresql
          - name: POSTGRESQL_DATABASE
            value: ${POSTGRESQL_DATABASE_NAME}
          image: registry.access.redhat.com/rhscl/postgresql-95-rhel7
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            tcpSocket:
              port: 5432
            timeoutSeconds: 1
          name: postgresql
          ports:
          - containerPort: 5432
            protocol: TCP
          readinessProbe:
            exec:
              command:
              - /bin/sh
              - -i
              - -c
              - psql -h 127.0.0.1 -U $POSTGRESQL_USER -q -d $POSTGRESQL_DATABASE -c
                'SELECT 1'
            failureThreshold: 3
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources:
            limits:
              memory: ${POSTGRESQL_MEMORY_LIMIT}
          securityContext:
            capabilities: {}
            privileged: false
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /var/lib/pgsql/data
            name: postgresql-data
          - mountPath: /var/lib/pgsql/podinfo
            name: podinfo
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
        volumes:
        - emptyDir: {}
          name: postgresql-data
        - downwardAPI:
            defaultMode: 420
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.name
              path: pod-name
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: pod-namespace
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.labels
              path: pod-labels
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.annotations
              path: pod-annotations
          metadata:
            defaultMode: 420
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.name
              name: pod-name
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              name: pod-namespace
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.labels
              name: pod-labels
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.annotations
              name: pod-annotations
          name: podinfo
    test: false
    triggers:
    - imageChangeParams:
        automatic: true
        containerNames:
        - postgresql
        from:
          kind: ImageStreamTag
          name: postgresql:9.5
          namespace: openshift
      type: ImageChange
    - type: ConfigChange
  status:
    availableReplicas: 0
    latestVersion: 0
    observedGeneration: 0
    replicas: 0
    unavailableReplicas: 0
    updatedReplicas: 0
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    annotations:
      openshift.io/generated-by: OpenShiftWebConsole
    creationTimestamp: null
    generation: 1
    labels:
      app: scality2
      dep_env: stg
      promotion-group: cbr
    name: scality2
  spec:
    replicas: 1
    selector:
      deploymentconfig: scality2
    strategy:
      activeDeadlineSeconds: 21600
      resources: {}
      rollingParams:
        intervalSeconds: 1
        maxSurge: 25%
        maxUnavailable: 25%
        timeoutSeconds: 600
        updatePeriodSeconds: 1
      type: Rolling
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: scality2
          deploymentconfig: scality2
      spec:
        containers:
        - env:
          - name: S3_CONFIG_FILE
            value: /tmp/config/config.json
          image: ${DOCKER_REGISTRY_IP}:${DOCKER_REGISTRY_PORT}/${NAMESPACE}/scality2
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 5
            initialDelaySeconds: 30
            periodSeconds: 60
            successThreshold: 1
            tcpSocket:
              port: 8000
            timeoutSeconds: 1
          name: scality2
          ports:
          - containerPort: 8080
            protocol: TCP
          - containerPort: 8000
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            initialDelaySeconds: 120
            periodSeconds: 30
            successThreshold: 1
            tcpSocket:
              port: 8000
            timeoutSeconds: 1
          resources:
            limits:
              cpu: 250m
              memory: 640Mi
            requests:
              cpu: 250m
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /tmp/config
            name: s3-config-data
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
        volumes:
        - configMap:
            defaultMode: 420
            name: s3-config
          name: s3-config-data
    test: false
    triggers:
    - imageChangeParams:
        automatic: true
        containerNames:
        - scality2
        from:
          kind: ImageStreamTag
          name: scality2:latest
          namespace: ${NAMESPACE}
      type: ImageChange
    - type: ConfigChange
  status:
    availableReplicas: 0
    latestVersion: 0
    observedGeneration: 0
    replicas: 0
    unavailableReplicas: 0
    updatedReplicas: 0
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      openshift.io/generated-by: OpenShiftWebConsole
      service.alpha.openshift.io/dependencies: '[{"name":"postgresql","namespace":"","kind":"Service"},{"name":"scality2","namespace":"","kind":"Service"}]'
    creationTimestamp: null
    labels:
      app: foodnet
      promotion-group: cbr
    name: foodnet
  spec:
    ports:
    - name: 8080-tcp
      port: 8080
      protocol: TCP
      targetPort: 8080
    - name: 8443-tcp
      port: 8443
      protocol: TCP
      targetPort: 8443
    - name: 8778-tcp
      port: 8778
      protocol: TCP
      targetPort: 8778
    selector:
      deploymentconfig: foodnet
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      template.openshift.io/expose-uri: postgres://{.spec.clusterIP}:{.spec.ports[?(.name=="postgresql")].port}
    creationTimestamp: null
    labels:
      app: pgqueue
      promotion-group: cbr
      template: postgresql-persistent-template
    name: pgqueue
  spec:
    ports:
    - name: postgresql
      port: 5432
      protocol: TCP
      targetPort: 5432
    selector:
      name: pgqueue
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      openshift.io/generated-by: OpenShiftWebConsole
      service.alpha.openshift.io/dependencies: '[{"name":"postgresql","namespace":"","kind":"Service"}]'
    creationTimestamp: null
    labels:
      app: phinms
      promotion-group: cbr
    name: phinms
  spec:
    ports:
    - name: 8080-tcp
      port: 8080
      protocol: TCP
      targetPort: 8080
    - name: 8443-tcp
      port: 8443
      protocol: TCP
      targetPort: 8443
    - name: 8778-tcp
      port: 8778
      protocol: TCP
      targetPort: 8778
    selector:
      deploymentconfig: phinms
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    creationTimestamp: null
    labels:
      app: postgresql
      dep_env: stg
      promotion-group: cbr
      template: postgresql-ephemeral-template
    name: postgresql
  spec:
    ports:
    - name: postgresql
      port: 5432
      protocol: TCP
      targetPort: 5432
    selector:
      name: postgresql
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      openshift.io/generated-by: OpenShiftWebConsole
    creationTimestamp: null
    labels:
      app: scality2
      dep_env: stg
      promotion-group: cbr
    name: scality2
  spec:
    ports:
    - name: 8000-tcp
      port: 8000
      protocol: TCP
      targetPort: 8000
    selector:
      deploymentconfig: scality2
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  data:
    application.properties: |
      #spring.main.sources=org.mycompany

      logging.config=classpath:logback.xml

      # the options from org.apache.camel.spring.boot.CamelConfigurationProperties can be configured here
      camel.springboot.name=SDP-CBR

      # lets listen on all ports to ensure we can be invoked from the pod IP
      server.address=0.0.0.0
      management.address=0.0.0.0

      # lets use a different management port in case you need to listen to HTTP requests on 8080
      management.port=8081

      # disable all management endpoints except health
      endpoints.enabled = false
      endpoints.health.enabled = true

      sdpqDataSource.jdbc.driverClassName=org.postgresql.Driver
      sdpqDataSource.jdbc.url=jdbc:postgresql://pgqueue:5432/${PGQUEUE_DATABASE}
      sdpqDataSource.jdbc.username=${PGQUEUE_USER}
      sdpqDataSource.jdbc.password=${PGQUEUE_PASSWORD}

      foodNet.queue=foodNetQueue?dataSource=sdpqDataSource

      aims.bucketName=foodnet
      aims.AccessKey=${AIMS_ACCESS_KEY}
      aims.SecretAccessKey=${AIMS_SECRET_ACCESS_KEY}
      aims.S3Url=http://scality2:8000
      aims.url=${aims.bucketName}?amazonS3Endpoint=${aims.S3Url}&accessKey=${aims.AccessKey}&secretKey=${aims.SecretAccessKey}
      aims.SQSUrl=
      aims.SQSNotificationURL=
  kind: ConfigMap
  metadata:
    creationTimestamp: null
    labels:
      app: foodnet
      promotion-group: cbr
    name: foodnet-config
- apiVersion: v1
  data:
    application.properties: |
      #spring.main.sources=org.mycompany

      logging.config=classpath:logback.xml

      # the options from org.apache.camel.spring.boot.CamelConfigurationProperties can be configured here
      camel.springboot.name=SDP-CBR

      # lets listen on all ports to ensure we can be invoked from the pod IP
      server.address=0.0.0.0
      management.address=0.0.0.0

      # lets use a different management port in case you need to listen to HTTP requests on 8080
      management.port=8081

      # disable all management endpoints except health
      endpoints.enabled = false
      endpoints.health.enabled = true

      sdpqDataSource.jdbc.driverClassName=org.postgresql.Driver
      sdpqDataSource.jdbc.url=jdbc:postgresql://pgqueue:5432/${PGQUEUE_DATABASE}
      sdpqDataSource.jdbc.username=${PGQUEUE_USER}
      sdpqDataSource.jdbc.password=${PGQUEUE_PASSWORD}

      phinms.jdbc.driverClassName=org.postgresql.Driver
      phinms.jdbc.url=jdbc:postgresql://postgresql:5432/${POSTGRESQL_DATABASE}
      phinms.jdbc.username=${POSTGRESQL_USER}
      phinms.jdbc.password=${POSTGRESQL_PASSWORD}

      phinms.table=message_inq
      phinms.service=MVPS
      phinms.sql=select * from ${phinms.table} where processingStatus = 'queued' and  (applicationStatus is NULL or applicationStatus='NULL')?dataSource=phinMsDataSource&onConsume=update ${phinms.table} set applicationStatus='completed' where recordId=:#recordId&onConsumeFailed=update ${phinms.table} set applicationStatus='failed' where recordId=:#recordId&delay=10000

      foodNet.queue=foodNetQueue?dataSource=sdpqDataSource
      nndss.queue=nndssQueue?tableName=nndssQueue&dataSource=sdpqDataSource
  kind: ConfigMap
  metadata:
    creationTimestamp: null
    labels:
      app: phinms
      promotion-group: cbr
    name: phinms-config
- apiVersion: v1
  data:
    config.json: |
      {
          "port": 8000,
          "listenOn": [],
          "replicationGroupId": "RG001",
          "restEndpoints": {
              "localhost": "us-east-1",
              "127.0.0.1": "us-east-1",
              "cloudserver-front": "us-east-1",
              "s3.docker.test": "us-east-1",
              "127.0.0.2": "us-east-1",
              "s3.amazonaws.com": "us-east-1",
              "scality2-cbr.129.83.185.216.xip.io": "us-east-1",
              "scality2": "us-east-1"
          },
          "websiteEndpoints": ["s3-website-us-east-1.amazonaws.com",
                              "s3-website.us-east-2.amazonaws.com",
                              "s3-website-us-west-1.amazonaws.com",
                              "s3-website-us-west-2.amazonaws.com",
                              "s3-website.ap-south-1.amazonaws.com",
                              "s3-website.ap-northeast-2.amazonaws.com",
                              "s3-website-ap-southeast-1.amazonaws.com",
                              "s3-website-ap-southeast-2.amazonaws.com",
                              "s3-website-ap-northeast-1.amazonaws.com",
                              "s3-website.eu-central-1.amazonaws.com",
                              "s3-website-eu-west-1.amazonaws.com",
                              "s3-website-sa-east-1.amazonaws.com",
                              "s3-website.localhost",
                              "s3-website.scality.test"],
          "replicationEndpoints": [{
              "site": "zenko",
              "servers": ["127.0.0.1:8000"],
              "default": true
          }, {
              "site": "us-east-2",
              "type": "aws_s3"
          }],
          "cdmi": {
              "host": "localhost",
              "port": 81,
              "path": "/dewpoint",
              "readonly": true
          },
          "bucketd": {
              "bootstrap": ["localhost"]
          },
          "vaultd": {
              "host": "localhost",
              "port": 8500
          },
          "clusters": 2,
          "log": {
              "logLevel": "info",
              "dumpLevel": "error"
          },
          "healthChecks": {
              "allowFrom": ["127.0.0.1/8", "::1"]
          },
          "metadataClient": {
              "host": "localhost",
              "port": 9990
          },
          "dataClient": {
              "host": "localhost",
              "port": 9991
          },
          "metadataDaemon": {
              "bindAddress": "localhost",
              "port": 9990
          },
          "dataDaemon": {
              "bindAddress": "localhost",
              "port": 9991
          },
          "recordLog": {
              "enabled": false,
              "recordLogName": "s3-recordlog"
          },
          "mongodb": {
             "replicaSetHosts": "localhost:27017,localhost:27018,localhost:27019",
             "writeConcern": "majority",
             "replicaSet": "rs0",
             "readPreference": "primary",
             "database": "metadata"
          }
      }
  kind: ConfigMap
  metadata:
    creationTimestamp: null
    labels:
      app: scality2
      dep_env: stg
      promotion-group: cbr
    name: s3-config
- apiVersion: v1
  stringData:
    access-key: ${SECRET_AIMS_ACCESS_KEY}
    secret-access-key: ${SECRET_AIMS_SECRET_ACCESS_KEY}
  kind: Secret
  metadata:
    creationTimestamp: null
    labels:
      app: scality2
      promotion-group: cbr
    name: aims
  type: Opaque
- apiVersion: v1
  stringData:
    database-password: ${SECRET_PGQUEUE_PASSWORD}
    database-user: ${SECRET_PGQUEUE_USER}
  kind: Secret
  metadata:
    creationTimestamp: null
    labels:
      app: pgqueue
      promotion-group: cbr
      template: postgresql-persistent-template
    name: pgqueue
  type: Opaque
- apiVersion: v1
  stringData:
    database-password: ${SECRET_POSTGRESQL_PASSWORD}
    database-user: ${SECRET_POSTGRESQL_USER}
  kind: Secret
  metadata:
    creationTimestamp: null
    labels:
      app: postgresql
      promotion-group: cbr
      template: postgresql-ephemeral-template
    name: postgresql
  type: Opaque
- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    creationTimestamp: null
    labels:
      app: pgqueue
      promotion-group: cbr
      template: postgresql-persistent-template
    name: pgqueue
  spec:
    accessModes:
    - ReadWriteOnce
    resources:
      requests:
        storage: ${PGQUEUE_VOLUME_CAPACITY}
parameters:
- displayName: CBR version number
  name: CBR_RELEASE
  required: true
  value: '1.1.0'
- description: The OpenShift Namespace where the project's ImageStreams reside.
  displayName: ImageStream Namespace
  name: NAMESPACE
  required: true
- displayName: Docker Registry address
  name: DOCKER_REGISTRY_IP
  required: true
- displayName: Docker Registry port
  name: DOCKER_REGISTRY_PORT
  required: true
  value: '5000'
- description: Name for the pgqueue database
  displayName: Pgqueue Database Name
  name: PGQUEUE_DATABASE_NAME
  required: true
  value: 'cbr'
- description: Username for the pgqueue database
  displayName: Pgqueue Username
  name: SECRET_PGQUEUE_USER
  required: true
  value: 'cbr'
- description: Password for the pgqueue database
  displayName: Pgqueue Password
  from: '[a-zA-Z0-9]{16}'
  generate: expression
  name: SECRET_PGQUEUE_PASSWORD
  required: true
- description: Volume space available for pgqueue data, e.g. 512Mi, 2Gi
  displayName: Pgqueue Volume Capacity
  name: PGQUEUE_VOLUME_CAPACITY
  required: true
  value: 1Gi
- description: Maximum amount of memory pgqueue can use
  displayName: Pgqueue Memory Limit
  name: PGQUEUE_MEMORY_LIMIT
  required: true
  value: 512Mi
- description: Name for the postgresql database
  displayName: Postgresql Database Name
  name: POSTGRESQL_DATABASE_NAME
  required: true
  value: 'cbr'
- description: Username for the postgresql database
  displayName: Postgresql Username
  name: SECRET_POSTGRESQL_USER
  required: true
  value: 'cbr'
- description: Password for the postgresql database
  displayName: Postgresql Password
  from: '[a-zA-Z0-9]{16}'
  generate: expression
  name: SECRET_POSTGRESQL_PASSWORD
  required: true
- description: Maximum amount of memory postgresql can use
  displayName: Postgresql Memory Limit
  name: POSTGRESQL_MEMORY_LIMIT
  required: true
  value: 512Mi
- description: Bucket Access Key for S3/Scality
  displayName: Bucket Access Key
  from: '[a-zA-Z0-9]{16}'
  generate: expression
  name: SECRET_AIMS_ACCESS_KEY
  required: true
- description: Bucket Secret Access Key for S3/Scality
  displayName: Bucket Secret Access Key
  from: '[a-zA-Z0-9]{16}'
  generate: expression
  name: SECRET_AIMS_SECRET_ACCESS_KEY
  required: true
