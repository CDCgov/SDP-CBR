apiVersion: v1
kind: Template
metadata:
  creationTimestamp: null
  name: cbr
  annotations:
    description: 'Template used to deploy SDP CBR'
    openshift.io/display-name: SDP-CBR (Content Based Routing)
    openshift.io/long-description: 'This template deploys Surveillance Data Platform Content Based Routing (SDP-CBR) into an existing OpenShift project.'
    openshift.io/documentation-url: https://github.com/CDCgov/SDP-CBR
    template.openshift.io/provider-display-name: SDP Team
    template.openshift.io/support-url: https://svcmgr.cdc.gov/
    tags: cdc, sdp, cbr, routing, foodnet, phinms
  message: 'Content Based Routing was deployed from the template.'
labels:
  template: CBR-template
objects:
- apiVersion: v1
  kind: ImageStream
  metadata:
    annotations:
      openshift.io/generated-by: OpenShiftWebConsole
    creationTimestamp: null
    generation: 1
    labels:
      app: foodnet
      promotion-group: cbr
    name: foodnet
- apiVersion: v1
  kind: ImageStream
  metadata:
    annotations:
      openshift.io/generated-by: OpenShiftWebConsole
    creationTimestamp: null
    generation: 1
    labels:
      app: phinms
      promotion-group: cbr
    name: phinms
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    annotations:
      openshift.io/generated-by: OpenShiftWebConsole
    creationTimestamp: null
    generation: 1
    labels:
      app: foodnet
      promotion-group: cbr
    name: foodnet
  spec:
    replicas: 1
    selector:
      deploymentconfig: foodnet
    strategy:
      activeDeadlineSeconds: 21600
      resources: {}
      rollingParams:
        intervalSeconds: 1
        maxSurge: 25%
        maxUnavailable: 25%
        timeoutSeconds: 600
        updatePeriodSeconds: 1
      type: Rolling
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: foodnet
          deploymentconfig: foodnet
      spec:
        containers:
        - env:
          - name: PGQUEUE_USER
            valueFrom:
              secretKeyRef:
                key: database-user
                name: pgqueue
          - name: PGQUEUE_PASSWORD
            valueFrom:
              secretKeyRef:
                key: database-password
                name: pgqueue
          - name: PGQUEUE_DATABASE
            value: ${PGQUEUE_DATABASE_NAME}
          - name: AIMS_BUCKET
            value: ${AIMS_BUCKET_NAME}
          - name: AIMS_ACCESS_KEY
            valueFrom:
              secretKeyRef:
                key: access-key
                name: aims
          - name: AIMS_SECRET_ACCESS_KEY
            valueFrom:
              secretKeyRef:
                key: secret-access-key
                name: aims
          - name: JAVA_APP_JAR
            value: sdp-cbr-foodnet-${CBR_RELEASE}.jar
          - name: HTTP_PROXY
          - name: HTTPS_PROXY
          - name: NO_PROXY
          - name: http_proxy
          - name: https_proxy
          - name: no_proxy
          image: ${DOCKER_REGISTRY_IP}:${DOCKER_REGISTRY_PORT}/${NAMESPACE}/foodnet
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 10
            initialDelaySeconds: 30
            periodSeconds: 60
            successThreshold: 1
            tcpSocket:
              port: 8080
            timeoutSeconds: 1
          name: foodnet
          ports:
          - containerPort: 8080
            protocol: TCP
          - containerPort: 8443
            protocol: TCP
          - containerPort: 8778
            name: jolokia
            protocol: TCP
          readinessProbe:
            failureThreshold: 10
            initialDelaySeconds: 5
            periodSeconds: 60
            successThreshold: 1
            tcpSocket:
              port: 8080
            timeoutSeconds: 1
          resources:
            limits:
              cpu: 200m
              memory: 256Mi
            requests:
              memory: 256Mi
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /deployments/config/
            name: foodnet-config-data
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
        volumes:
        - configMap:
            defaultMode: 420
            name: foodnet-config
          name: foodnet-config-data
    test: false
    triggers:
    - imageChangeParams:
        automatic: true
        containerNames:
        - foodnet
        from:
          kind: ImageStreamTag
          name: foodnet:latest
          namespace: ${NAMESPACE}
      type: ImageChange
    - type: ConfigChange
  status:
    availableReplicas: 0
    latestVersion: 0
    observedGeneration: 0
    replicas: 0
    unavailableReplicas: 0
    updatedReplicas: 0
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    creationTimestamp: null
    generation: 1
    labels:
      app: pgqueue
      promotion-group: cbr
      template: postgresql-persistent-template
    name: pgqueue
  spec:
    replicas: 1
    selector:
      name: pgqueue
    strategy:
      activeDeadlineSeconds: 21600
      recreateParams:
        timeoutSeconds: 600
      resources: {}
      type: Recreate
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: pgqueue
          name: pgqueue
      spec:
        containers:
        - env:
          - name: POSTGRESQL_USER
            valueFrom:
              secretKeyRef:
                key: database-user
                name: pgqueue
          - name: POSTGRESQL_PASSWORD
            valueFrom:
              secretKeyRef:
                key: database-password
                name: pgqueue
          - name: POSTGRESQL_DATABASE
            value: ${PGQUEUE_DATABASE_NAME}
          image: registry.access.redhat.com/rhscl/postgresql-95-rhel7
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            tcpSocket:
              port: 5432
            timeoutSeconds: 1
          name: postgresql
          ports:
          - containerPort: 5432
            protocol: TCP
          readinessProbe:
            exec:
              command:
              - /bin/sh
              - -i
              - -c
              - psql -h 127.0.0.1 -U $POSTGRESQL_USER -q -d $POSTGRESQL_DATABASE -c
                'SELECT 1'
            failureThreshold: 3
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources:
            limits:
              memory: ${PGQUEUE_MEMORY_LIMIT}
          securityContext:
            capabilities: {}
            privileged: false
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /var/lib/pgsql/data
            name: pgqueue-data
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
        volumes:
        - name: pgqueue-data
          persistentVolumeClaim:
            claimName: pgqueue
    test: false
    triggers:
    - imageChangeParams:
        automatic: true
        containerNames:
        - postgresql
        from:
          kind: ImageStreamTag
          name: postgresql:9.5
          namespace: openshift
      type: ImageChange
    - type: ConfigChange
  status:
    availableReplicas: 0
    latestVersion: 0
    observedGeneration: 0
    replicas: 0
    unavailableReplicas: 0
    updatedReplicas: 0
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    annotations:
      openshift.io/generated-by: OpenShiftWebConsole
    creationTimestamp: null
    generation: 1
    labels:
      app: phinms
      promotion-group: cbr
    name: phinms
  spec:
    replicas: 1
    selector:
      deploymentconfig: phinms
    strategy:
      activeDeadlineSeconds: 21600
      resources: {}
      rollingParams:
        intervalSeconds: 1
        maxSurge: 25%
        maxUnavailable: 25%
        timeoutSeconds: 600
        updatePeriodSeconds: 1
      type: Rolling
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: phinms
          deploymentconfig: phinms
      spec:
        containers:
        - env:
          - name: PGQUEUE_USER
            valueFrom:
              secretKeyRef:
                key: database-user
                name: pgqueue
          - name: PGQUEUE_PASSWORD
            valueFrom:
              secretKeyRef:
                key: database-password
                name: pgqueue
          - name: PGQUEUE_DATABASE
            value: ${PGQUEUE_DATABASE_NAME}
          - name: POSTGRESQL_USER
            valueFrom:
              secretKeyRef:
                key: database-user
                name: postgresql
          - name: POSTGRESQL_PASSWORD
            valueFrom:
              secretKeyRef:
                key: database-password
                name: postgresql
          - name: POSTGRESQL_URL
            value: ${POSTGRESQL_ADDRESS_URL}
          - name: POSTGRESQL_PORT
            value: ${POSTGRESQL_ADDRESS_PORT}
          - name: POSTGRESQL_INSTANCE
            value: ${POSTGRESQL_INSTANCE_NAME}
          - name: POSTGRESQL_SERVICE
            value: ${POSTGRESQL_SERVICE_NAME}
          - name: POSTGRESQL_DATABASE
            value: ${POSTGRESQL_DATABASE_NAME}
          - name: JAVA_APP_JAR
            value: sdp-cbr-phinms-${CBR_RELEASE}.jar
          - name: HTTP_PROXY
          - name: HTTPS_PROXY
          - name: NO_PROXY
          - name: http_proxy
          - name: https_proxy
          - name: no_proxy
          image: ${DOCKER_REGISTRY_IP}:${DOCKER_REGISTRY_PORT}/${NAMESPACE}/phinms
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 10
            initialDelaySeconds: 30
            periodSeconds: 60
            successThreshold: 1
            tcpSocket:
              port: 8080
            timeoutSeconds: 1
          name: phinms
          ports:
          - containerPort: 8080
            protocol: TCP
          - containerPort: 8443
            protocol: TCP
          - containerPort: 8778
            name: jolokia
            protocol: TCP
          readinessProbe:
            failureThreshold: 10
            initialDelaySeconds: 5
            periodSeconds: 60
            successThreshold: 1
            tcpSocket:
              port: 8080
            timeoutSeconds: 1
          resources:
            limits:
              cpu: 200m
              memory: 256Mi
            requests:
              memory: 256Mi
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /deployments/config/
            name: phinms-config-data
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
        volumes:
        - configMap:
            defaultMode: 420
            name: phinms-config
          name: phinms-config-data
    test: false
    triggers:
    - imageChangeParams:
        automatic: true
        containerNames:
        - phinms
        from:
          kind: ImageStreamTag
          name: phinms:latest
          namespace: ${NAMESPACE}
      type: ImageChange
    - type: ConfigChange
  status:
    availableReplicas: 0
    latestVersion: 0
    observedGeneration: 0
    replicas: 0
    unavailableReplicas: 0
    updatedReplicas: 0
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      openshift.io/generated-by: OpenShiftWebConsole
    creationTimestamp: null
    labels:
      app: foodnet
      promotion-group: cbr
    name: foodnet
  spec:
    ports:
    - name: 8080-tcp
      port: 8080
      protocol: TCP
      targetPort: 8080
    - name: 8443-tcp
      port: 8443
      protocol: TCP
      targetPort: 8443
    - name: 8778-tcp
      port: 8778
      protocol: TCP
      targetPort: 8778
    selector:
      deploymentconfig: foodnet
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    creationTimestamp: null
    labels:
      app: pgqueue
      promotion-group: cbr
      template: postgresql-persistent-template
    name: pgqueue
  spec:
    ports:
    - name: postgresql
      port: 5432
      protocol: TCP
      targetPort: 5432
    selector:
      name: pgqueue
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      openshift.io/generated-by: OpenShiftWebConsole
    creationTimestamp: null
    labels:
      app: phinms
      promotion-group: cbr
    name: phinms
  spec:
    ports:
    - name: 8080-tcp
      port: 8080
      protocol: TCP
      targetPort: 8080
    - name: 8443-tcp
      port: 8443
      protocol: TCP
      targetPort: 8443
    - name: 8778-tcp
      port: 8778
      protocol: TCP
      targetPort: 8778
    selector:
      deploymentconfig: phinms
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  data:
    application.properties: |
      #spring.main.sources=org.mycompany

      logging.config=classpath:logback.xml

      # the options from org.apache.camel.spring.boot.CamelConfigurationProperties can be configured here
      camel.springboot.name=SDP-CBR

      # lets listen on all ports to ensure we can be invoked from the pod IP
      server.address=0.0.0.0
      management.address=0.0.0.0

      # lets use a different management port in case you need to listen to HTTP requests on 8080
      management.port=8081

      # disable all management endpoints except health
      endpoints.enabled = false
      endpoints.health.enabled = true

      sdpqDataSource.jdbc.driverClassName=org.postgresql.Driver
      sdpqDataSource.jdbc.url=jdbc:postgresql://pgqueue:5432/${PGQUEUE_DATABASE}
      sdpqDataSource.jdbc.username=${PGQUEUE_USER}
      sdpqDataSource.jdbc.password=${PGQUEUE_PASSWORD}

      foodNet.queue=foodNetQueue?dataSource=sdpqDataSource

      aims.bucketName=${AIMS_BUCKET}
      aims.AccessKey=${AIMS_ACCESS_KEY}
      aims.SecretAccessKey=${AIMS_SECRET_ACCESS_KEY}
      aims.S3Url=
      aims.url=${aims.bucketName}?amazonS3Endpoint=${aims.S3Url}&accessKey=${aims.AccessKey}&secretKey=${aims.SecretAccessKey}
      aims.SQSUrl=
      aims.SQSNotificationURL=
  kind: ConfigMap
  metadata:
    creationTimestamp: null
    labels:
      app: foodnet
      promotion-group: cbr
    name: foodnet-config
- apiVersion: v1
  data:
    application.properties: |
      #spring.main.sources=org.mycompany

      logging.config=classpath:logback.xml

      # the options from org.apache.camel.spring.boot.CamelConfigurationProperties can be configured here
      camel.springboot.name=SDP-CBR

      # lets listen on all ports to ensure we can be invoked from the pod IP
      server.address=0.0.0.0
      management.address=0.0.0.0

      # lets use a different management port in case you need to listen to HTTP requests on 8080
      management.port=8081

      # disable all management endpoints except health
      endpoints.enabled = false
      endpoints.health.enabled = true

      sdpqDataSource.jdbc.driverClassName=org.postgresql.Driver
      sdpqDataSource.jdbc.url=jdbc:postgresql://pgqueue:5432/${PGQUEUE_DATABASE}
      sdpqDataSource.jdbc.username=${PGQUEUE_USER}
      sdpqDataSource.jdbc.password=${PGQUEUE_PASSWORD}

      phinms.jdbc.driverClassName=com.microsoft.sqlserver.jdbc.SQLServerDriver
      phinms.jdbc.url=jdbc:sqlserver://${POSTGRESQL_URL}:${POSTGRESQL_PORT};instance=${POSTGRESQL_INSTANCE}&databaseName=${POSTGRESQL_DATABASE};encrypt=true;trustServerCertificate=true;
      phinms.jdbc.username=${POSTGRESQL_USER}
      phinms.jdbc.password=${POSTGRESQL_PASSWORD}

      phinms.table=message_inq
      phinms.service=${POSTGRESQL_SERVICE}
      phinms.sql=select * from ${phinms.table} where processingStatus = 'queued' and  (applicationStatus is NULL or applicationStatus='NULL')?dataSource=phinMsDataSource&onConsume=update ${phinms.table} set applicationStatus='completed' where recordId=:#recordId&onConsumeFailed=update ${phinms.table} set applicationStatus='failed' where recordId=:#recordId&delay=10000

      foodNet.queue=foodNetQueue?dataSource=sdpqDataSource
      nndss.queue=nndssQueue?tableName=nndssQueue&dataSource=sdpqDataSource
  kind: ConfigMap
  metadata:
    creationTimestamp: null
    labels:
      app: phinms
      promotion-group: cbr
    name: phinms-config
- apiVersion: v1
  stringData:
    access-key: ${SECRET_AIMS_ACCESS_KEY}
    secret-access-key: ${SECRET_AIMS_SECRET_ACCESS_KEY}
  kind: Secret
  metadata:
    creationTimestamp: null
    labels:
      app: scality2
      promotion-group: cbr
    name: aims
  type: Opaque
- apiVersion: v1
  stringData:
    database-password: ${SECRET_PGQUEUE_PASSWORD}
    database-user: ${SECRET_PGQUEUE_USER}
  kind: Secret
  metadata:
    creationTimestamp: null
    labels:
      app: pgqueue
      promotion-group: cbr
      template: postgresql-persistent-template
    name: pgqueue
  type: Opaque
- apiVersion: v1
  stringData:
    database-password: ${SECRET_POSTGRESQL_PASSWORD}
    database-user: ${SECRET_POSTGRESQL_USER}
  kind: Secret
  metadata:
    creationTimestamp: null
    labels:
      app: postgresql
      promotion-group: cbr
      template: postgresql-ephemeral-template
    name: postgresql
  type: Opaque
- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    creationTimestamp: null
    labels:
      app: pgqueue
      promotion-group: cbr
      template: postgresql-persistent-template
    name: pgqueue
  spec:
    accessModes:
    - ReadWriteOnce
    resources:
      requests:
        storage: ${PGQUEUE_VOLUME_CAPACITY}
parameters:
- displayName: CBR version number
  name: CBR_RELEASE
  required: true
  value: '1.1.0'
- description: The OpenShift Namespace where the project's ImageStreams reside.
  displayName: ImageStream Namespace
  name: NAMESPACE
  required: true
- displayName: Docker Registry address
  name: DOCKER_REGISTRY_IP
  required: true
- displayName: Docker Registry port
  name: DOCKER_REGISTRY_PORT
  required: true
  value: '5000'
- description: Name for the pgqueue database
  displayName: Pgqueue Database Name
  name: PGQUEUE_DATABASE_NAME
  required: true
  value: 'cbr'
- description: Username for the pgqueue database
  displayName: Pgqueue Username
  name: SECRET_PGQUEUE_USER
  required: true
  value: 'cbr'
- description: Password for the pgqueue database
  displayName: Pgqueue Password
  from: '[a-zA-Z0-9]{16}'
  generate: expression
  name: SECRET_PGQUEUE_PASSWORD
  required: true
- description: Volume space available for pgqueue data, e.g. 512Mi, 2Gi
  displayName: Pgqueue Volume Capacity
  name: PGQUEUE_VOLUME_CAPACITY
  required: true
  value: 1Gi
- description: Maximum amount of memory pgqueue can use
  displayName: Pgqueue Memory Limit
  name: PGQUEUE_MEMORY_LIMIT
  required: true
  value: 512Mi
- description: Database URL for PHIN-MS 
  displayName: PHIN-MS URL
  name: POSTGRESQL_ADDRESS_URL
  required: true
- description: Database port for PHIN-MS 
  displayName: PHIN-MS Port
  name: POSTGRESQL_ADDRESS_PORT
  required: true
  value: '1625'
- description: Name for the PHIN-MS database
  displayName: PHIN-MS Database Name
  name: POSTGRESQL_DATABASE_NAME
  required: true
- description: Instance name for PHIN-MS
  displayName: PHIN-MS Instance Name
  name: POSTGRESQL_INSTANCE_NAME
  required: true
- description: Service for PHIN-MS
  displayName: PHIN-MS Service
  name: POSTGRESQL_SERVICE_NAME
  required: true
  value: 'MVPS'
- description: Username for PHIN-MS
  displayName: PHIN-MS Username
  name: SECRET_POSTGRESQL_USER
  required: true
- description: Password for PHIN-MS 
  displayName: PHIN-MS Password
  name: SECRET_POSTGRESQL_PASSWORD
  required: true
- description: Bucket Name for S3
  displayName: S3 Bucket Name
  name: AIMS_BUCKET_NAME
  required: true
- description: Bucket Access Key for S3
  displayName: S3 Bucket Access Key
  name: SECRET_AIMS_ACCESS_KEY
  required: true
- description: Bucket Secret Access Key for S3
  displayName: S3 Bucket Secret Access Key
  name: SECRET_AIMS_SECRET_ACCESS_KEY
  required: true
