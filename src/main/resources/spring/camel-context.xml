<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:camel="http://camel.apache.org/schema/spring"
    xmlns:context="http://www.springframework.org/schema/context"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation=" http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd                                http://camel.apache.org/schema/spring http://camel.apache.org/schema/spring/camel-spring.xsd                        ">
    <!-- START SNIPPET: e1 -->
    <!-- this is the JDBC data source which uses an in-memory only Apache Derby 
		database -->
    <bean class="org.apache.commons.dbcp.BasicDataSource"
        destroy-method="close" id="dataSource">
        <property name="driverClassName" value="${jdbc.driverClassName}"/>
        <property name="url" value="${jdbc.url}"/>
        <property name="username" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>
    </bean>
    <bean class="org.cdc.gov.sdp.Transformer" id="myProcessor"/>
    <bean class="org.cdc.gov.sdp.AIMSHeaderProcessor" id="aimsHeaderProcessor"/>
    <bean class="org.cdc.gov.sdp.JSONTransformer" id="jsonTransformer"/>
    <!-- repository for the idempotent consumer -->
    <bean
        class="org.apache.camel.processor.idempotent.MemoryIdempotentRepository" id="nndssIDRepo"/>
    <!-- repository for the idempotent consumer -->
    <bean
        class="org.apache.camel.processor.idempotent.MemoryIdempotentRepository" id="foodNetIDRepo"/>
    <!-- Define a traditional camel context here -->
    <camelContext id="camel" trace="true" xmlns="http://camel.apache.org/schema/spring">
        <dataFormats>
            <!-- Here we define a Json data format with the id jack and that it should 
				use the TestPojo as the class type when doing unmarshal. The unmarshalTypeName 
				is optional, if not provided Camel will use a Map as the type. -->
            <json id="jack" library="Jackson"/>
        </dataFormats>
        <route id="MvpsPhinMSRoute">
            <from id="mvps_phinms" uri="sql:{{phinms.sql}}"/>
            <camel:process id="_process1" ref="myProcessor"/>
            <camel:choice id="_choice1">
                <camel:when id="_when1">
                    <camel:simple>body.trim().startsWith("FHS")</camel:simple>
                    <camel:split id="_split1">
                        <camel:method
                            beanType="org.cdc.gov.sdp.HL7V2BatchSplitter"
                            method="split" trim="false"/>
                        <to id="_to1" uri="direct:multicast"/>
                    </camel:split>
                </camel:when>
                <camel:otherwise id="_otherwise1">
                    <to id="_to2" uri="direct:multicast"/>
                </camel:otherwise>
            </camel:choice>
        </route>
        <route id="Multicast">
            <from id="_from1" uri="direct:multicast"/>
            <log id="_log3" message="multicast ${body}"/>
            <unmarshal id="_unmarshal1" ref="hl7"/>
            <multicast id="_multicast2">
                <to id="_to31" uri="direct:foodNet"/>
                <to id="_to41" uri="direct:nndss"/>
            </multicast>
        </route>
        <route id="FoodNetRoute">
            <from id="foodNetFrom" uri="direct:foodNet"/>
            <idempotentConsumer id="_idempotentConsumer1" messageIdRepositoryRef="foodNetIDRepo">
                <header>ID</header>
                <log id="_log1" message="FOOOD NEET FILLTER"/>
                <filter id="foodNetFilter">
                    <javaScript>
	                result = false
	                var header = request.body.getMSH()
	                var version = header.getVersionID().getVersionID().getValue()
	                if( version &amp;&amp; (version.startsWith("2.5") || version.startsWith("2.6"))){
		        	   java.lang.System.out.println("HEADER "+header.encode())
		        	    if(header.encode().contains("FDD_MMG_V1.0")){
		        	    	result = true;
		        	    	java.lang.System.out.println("PASSED FILTER")
		        	    }
		                else{
		                	result = false
		                	java.lang.System.out.println("DID NOT PASSED FILTER")
		               	 }
	                }</javaScript>
                    <marshal id="_marshal1" ref="hl7"/>
                    <to id="to_aphl_s3" uri="direct:aphl_s3"/>
                </filter>
            </idempotentConsumer>
        </route>
        <route id="APHL_ROUTE">
            <from id="from_aphl_s3" uri="direct:aphl_s3"/>
            <setHeader headerName="CamelAwsS3Key" id="_setHeader1">
                <simple>
				${in.header.ID}
            </simple>
            </setHeader>
            <doTry id="_doTry1">
                <camel:process id="foodNetAimsHeaderProcess" ref="aimsHeaderProcessor"/>
                <to id="_to_s3" uri="aws-s3://{{aims.bucketName}}?amazonS3Endpoint={{aims.S3Url}}&amp;accessKey={{aims.AccessKey}}&amp;secretKey={{aims.SecretAccessKey}}"/>
                <doCatch id="_doCatch1">
                    <exception>java.lang.Exception</exception>
                    <log id="_log2" message="EXCEPTIPN \n ${exception.stacktrace}"/>
                </doCatch>
            </doTry>
        </route>
        <route id="nndssRoute">
            <from id="from_nndss" uri="direct:nndss"/>
            <idempotentConsumer id="_idempotentConsumer2" messageIdRepositoryRef="nndssIDRepo">
                <header>ID</header>
                <marshal id="_marshal2" ref="hl7"/>
                <camel:process id="nndssJsonTransform" ref="jsonTransformer"/>
                <marshal id="jsonNndssMarshller" ref="jack"/>
                <to id="to_nndss" uri="file:nndss?allowNullBody=true"/>
            </idempotentConsumer>
        </route>
    </camelContext>
</beans>
