<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:camel="http://camel.apache.org/schema/spring"
    xmlns:context="http://www.springframework.org/schema/context"
    xmlns:jee="http://www.springframework.org/schema/jee"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee.xsd http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd                                http://camel.apache.org/schema/spring http://camel.apache.org/schema/spring/camel-spring.xsd                        ">
    <!-- START SNIPPET: e1 -->
    <bean class="org.apache.commons.dbcp.BasicDataSource"
        destroy-method="close" id="phinMsDataSource">
        <property name="driverClassName" value="${phinms.jdbc.driverClassName}"/>
        <property name="url" value="${phinms.jdbc.url}"/>
        <property name="username" value="${phinms.jdbc.username}"/>
        <property name="password" value="${phinms.jdbc.password}"/>
    </bean>
    <bean class="org.apache.commons.dbcp.BasicDataSource"
        destroy-method="close" id="sdpqDataSource" primary="true">
        <property name="driverClassName" value="${sdpqDataSource.jdbc.driverClassName}"/>
        <property name="url" value="${sdpqDataSource.jdbc.url}"/>
        <property name="username" value="${sdpqDataSource.jdbc.username}"/>
        <property name="password" value="${sdpqDataSource.jdbc.password}"/>
    </bean>
    <bean class="org.cdc.gov.sdp.PhinMSTransformer" id="myProcessor"/>
    <bean class="org.cdc.gov.sdp.aphl.AIMSHeaderProcessor" id="aimsHeaderProcessor"/>
    <bean class="org.cdc.gov.sdp.JSONTransformer" id="jsonTransformer"/>
    <bean class="org.cdc.gov.sdp.ArrayListAggregationStrategy" id="agg"/>
    <bean class="org.cdc.gov.sdp.HTTP4Transformer" id="httpTransformer"/>
    <bean class="org.cdc.gov.sdp.SDPMessageIdRepository" id="foodNetIDRepo">
    	<constructor-arg ref="nndssDataSource"/>
    	<constructor-arg ref="foodNetIds"/>
    	<constructor-arg value="foodnet_message_ids"/>
    </bean>
   <!-- repository for the idempotent consumer -->
   <bean class="org.cdc.gov.sdp.SDPMessageIdRepository" id="nndssIDRepo">
    	<constructor-arg ref="nndssDataSource"/>
    	<constructor-arg ref="nndssIDs"/>
    	<constructor-arg value="nndss_message_ids"/>
    </bean>
    <!-- Define a traditional camel context here -->
    <camelContext id="camel" trace="false" xmlns="http://camel.apache.org/schema/spring">
        <!-- and the redelivery policy is a profile where we can configure it -->
        <redeliveryPolicyProfile id="myPolicy" maximumRedeliveries="100"
            redeliveryDelay="2000" retryAttemptedLogLevel="WARN"/>
        <route id="MvpsPhinMSRoute">
            <from id="mvps_phinms" uri="sql:{{phinms.sql}}"/>
            <camel:process id="setHeaders" ref="myProcessor"/>
            <camel:choice id="_choice1">
                <camel:when id="_when1">
                    <camel:simple>body.trim().startsWith("FHS")</camel:simple>
                    <camel:split id="batchSplitter"
                        parallelProcessing="false" strategyRef="agg">
                        <camel:method
                            beanType="org.cdc.gov.sdp.HL7V2BatchSplitter"
                            method="split" trim="false"/>
                        <to id="_to1" uri="direct:multicast"/>
                    </camel:split>
                </camel:when>
                <camel:otherwise id="_otherwise1">
                    <to id="_to2" uri="direct:multicast"/>
                </camel:otherwise>
            </camel:choice>
            <onException id="_onException1">
                <exception>java.lang.Exception</exception>
                <log id="mvps_log" message="EXCEPTION \n ${exception.stacktrace}"/>
            </onException>
        </route>
        <route id="Multicast">
            <from id="_from1" uri="direct:multicast"/>
            <multicast id="_multicast2">
                <to id="_to31" uri="direct:foodNetFilter"/>
                <to id="_to41" uri="direct:nndssQueue"/>
            </multicast>
        </route>
        <route id="foodNetFilter">
            <from id="_from2" uri="direct:foodNetFilter"/>
            <idempotentConsumer id="_idempotentConsumer" messageIdRepositoryRef="foodNetIDRepo">
                <header>CBR_ID</header>
                <log id="_log1" message="FOOD NET FILTER"/>
                <setHeader headerName="HL7Filter" id="_setHeader7">
                    <constant>*(/.MSH-21(*)-1 EQUALS FDD_MMG_V1.0)</constant>
                </setHeader>
                <unmarshal id="_unmarshal1" ref="hl7"/>
                <filter id="foodNetFilter">
                    <method beanType="org.cdc.gov.sdp.HL7Terser" method="filter"/>
                    <marshal id="_marshal1" ref="hl7"/>
                    <log id="fnf_passed_log" message="Exchange passed FoodNet filter"/>
                    <to id="foodNetQueue" uri="sdpqueue:{{foodNet.queue}}"/>
                </filter>
            </idempotentConsumer>
            <onException id="_onException2">
                <exception>java.lang.Exception</exception>
                <log id="fnf_log" message="EXCEPTION \n ${exception.stacktrace}"/>
            </onException>
        </route>
        <route id="nndssQueue">
            <from id="foodNetFrom" uri="direct:nndssQueue"/>
            <idempotentConsumer id="_idempotentConsumer1" messageIdRepositoryRef="nndssIDRepo">
                <header>CBR_ID</header>
                <to id="_to4" uri="sdpqueue:{{nndss.queue}}"/>
            </idempotentConsumer>
            <onException id="_onException3">
                <exception>java.lang.Exception</exception>
                <log id="nndss_log" message="EXCEPTION \n ${exception.stacktrace}"/>
            </onException>
        </route>
        <route id="FoodNetRoute">
            <from id="_from3" uri="sdpqueue:{{foodNet.queue}}"/>
            <setHeader headerName="CamelAwsS3Key" id="setAwsS3Key">
                <simple trim="false"> ${in.header.CBR_ID} 
			          </simple>
            </setHeader>
            <doTry id="_doTry1">
                <camel:process id="foodNetAimsHeaderProcess" ref="aimsHeaderProcessor"/>
                <to id="_to_s3" uri="aphl-s3://{{aims.url}}"/>
            </doTry>
            <doCatch id="fnr_doCatch1">
                <exception>java.lang.Exception</exception>
                <log id="fnr_log" message="EXCEPTION \n ${exception.stacktrace}"/>
            </doCatch>
        </route>
    </camelContext>
</beans>
