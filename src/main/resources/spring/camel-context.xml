<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:camel="http://camel.apache.org/schema/spring"
    xmlns:context="http://www.springframework.org/schema/context"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation=" http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd                                http://camel.apache.org/schema/spring http://camel.apache.org/schema/spring/camel-spring.xsd                        ">
    <!-- START SNIPPET: e1 -->
    <!-- this is the JDBC data source which uses an in-memory only Apache Derby 
		database -->
    <bean class="org.apache.commons.dbcp.BasicDataSource"
        destroy-method="close" id="dataSource">
        <property name="driverClassName" value="${jdbc.driverClassName}"/>
        <property name="url" value="${jdbc.url}"/>
        <property name="username" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>
    </bean>
    <bean class="org.mycompany.Transformer" id="myProcessor"/>
    <!-- Define a traditional camel context here -->
    <camelContext id="camel" trace="true" xmlns="http://camel.apache.org/schema/spring">
        <route id="_route2">
            <from id="_from2" uri="direct:foo"/>
            <log id="myLog" message="Message Type ${body.getMSH().getMessageProfileIdentifier()}"/>
            <filter id="_filter1">
                <javaScript>
                result = false
                var header = request.body.getMSH()
                var pi = header.getMessageProfileIdentifier()
                if(pi  &amp;&amp;  pi.length &gt; 0){
                	for(var i = 0; i&lt;= pi.length; i++){
                		if(pi[i].getEntityIdentifier().getValue() == "FDD_MMG_V1.0"){
                		  result = true
                		  break
                		}
                	}
                }else{
                result = false
                }</javaScript>
                <marshal id="_marshal1" ref="hl7"/>
                <to id="_to2" uri="direct:s3"/>
            </filter>
        </route>
        <route id="s3_route">
            <from id="_sfrom" uri="direct:s3"/>
            <setHeader headerName="CamelAwsS3Key" id="_setHeader1">
                <simple>
				${in.header.ID}
            </simple>
            </setHeader>
            <to id="_from_s3" uri="aws-s3://foodnet?amazonS3Endpoint=http://localhost:4567&amp;accessKey=ak&amp;secretKey=sk"/>
        </route>
        <route id="_route3">
            <from id="_from3" uri="direct:foo2"/>
            <marshal id="_marshal2" ref="hl7"/>
            <to id="_from1" uri="file:nndss?allowNullBody=true"/>
        </route>
        <route id="_route4">
            <from id="_from4" uri="sql:{{phinms.sql}"/>
            <log id="_log2" message="${body}"/>
            <camel:process id="_process1" ref="myProcessor"/>
            <unmarshal id="_unmarshal2" ref="hl7"/>
            <multicast id="_multicast2">
                <to id="_to31" uri="direct:foo"/>
                <to id="_to41" uri="direct:foo2"/>
            </multicast>
        </route>
    </camelContext>
</beans>
